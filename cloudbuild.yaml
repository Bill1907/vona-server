steps:
  # .env 파일에서 환경 변수 추출 및 직접 설정
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f .env ]; then
          # 환경 변수 추출
          ENV_VARS=$(grep -v '^#' .env | grep -v '^$' | sed 's/^/--set-env-vars=/' | tr '\n' ' ')
          echo "Extracted environment variables will be applied"
          # 변수 저장 (다음 단계에서 사용하기 위함)
          echo "ENV_VARS=\"$ENV_VARS\"" > _env_vars.sh
        else
          echo "Warning: .env file not found! Will proceed without environment variables."
          echo "ENV_VARS=\"\"" > _env_vars.sh
        fi

  # Docker 이미지 빌드
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/vona-server:$COMMIT_SHA', '.']

  # 빌드된 이미지를 Container Registry에 푸시
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vona-server:$COMMIT_SHA']

  # Cloud Run에 서비스 배포 (동적으로 환경 변수 적용)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source _env_vars.sh
        gcloud run deploy vona-server \
          --image=gcr.io/$PROJECT_ID/vona-server:$COMMIT_SHA \
          --region=asia-northeast3 \
          --platform=managed \
          --allow-unauthenticated \
          $ENV_VARS

# 이미지 태그
images:
  - 'gcr.io/$PROJECT_ID/vona-server:$COMMIT_SHA'

# 서비스 계정을 최상위 필드로 이동
serviceAccount: '307101842878-compute@developer.gserviceaccount.com'

options:
  logging: CLOUD_LOGGING_ONLY

timeout: '1200s' # 20분 타임아웃
