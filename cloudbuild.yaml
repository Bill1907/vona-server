steps:
  # .env 파일을 .env.yaml로 변환 (개선된 스크립트)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # 주석 없이 시작하여 YAML 파일 생성
        if [ -f .env ]; then
          echo "{" > .env.yaml
          grep -v '^#' .env | grep -v '^$' | while IFS= read -r line; do
            # = 기호로 첫 번째 구분만 적용
            key=$(echo "$line" | cut -d '=' -f1)
            value=$(echo "$line" | cut -d '=' -f2-)
            # 마지막 줄인지 확인하기 위해 임시 저장
            echo "  \"$key\": \"$value\"," >> .env.yaml.tmp
          done
          # 마지막 줄의 쉼표 제거
          sed '$ s/,$//' .env.yaml.tmp >> .env.yaml
          echo "}" >> .env.yaml
          rm .env.yaml.tmp
          
          echo "Generated .env.yaml file:"
          cat .env.yaml
        else
          echo "Error: .env file not found!"
          exit 1
        fi

  # Docker 이미지 빌드
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/vona-server:$COMMIT_SHA', '.']

  # 빌드된 이미지를 Container Registry에 푸시
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/vona-server:$COMMIT_SHA']

  # Cloud Run에 서비스 배포
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'vona-server'
      - '--image=gcr.io/$PROJECT_ID/vona-server:$COMMIT_SHA'
      - '--region=asia-northeast3' # 실제 사용 지역으로 변경
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--env-vars-file=.env.yaml'

# 이미지 태그
images:
  - 'gcr.io/$PROJECT_ID/vona-server:$COMMIT_SHA'

# 서비스 계정을 최상위 필드로 이동
serviceAccount: '307101842878-compute@developer.gserviceaccount.com'

options:
  logging: CLOUD_LOGGING_ONLY

timeout: '1200s' # 20분 타임아웃
